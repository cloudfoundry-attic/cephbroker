// This file was generated by counterfeiter
package cephfakes

import (
	"os"
	"sync"

	"github.com/cloudfoundry-incubator/cephbroker/cephbrokerlocal"
)

type FakeSystemUtil struct {
	MkdirAllStub        func(path string, perm os.FileMode) error
	mkdirAllMutex       sync.RWMutex
	mkdirAllArgsForCall []struct {
		path string
		perm os.FileMode
	}
	mkdirAllReturns struct {
		result1 error
	}
	WriteFileStub        func(filename string, data []byte, perm os.FileMode) error
	writeFileMutex       sync.RWMutex
	writeFileArgsForCall []struct {
		filename string
		data     []byte
		perm     os.FileMode
	}
	writeFileReturns struct {
		result1 error
	}
	RemoveStub        func(string) error
	removeMutex       sync.RWMutex
	removeArgsForCall []struct {
		arg1 string
	}
	removeReturns struct {
		result1 error
	}
	ExistsStub        func(path string) bool
	existsMutex       sync.RWMutex
	existsArgsForCall []struct {
		path string
	}
	existsReturns struct {
		result1 bool
	}
	ReadFileStub        func(path string) ([]byte, error)
	readFileMutex       sync.RWMutex
	readFileArgsForCall []struct {
		path string
	}
	readFileReturns struct {
		result1 []byte
		result2 error
	}
	invocations map[string][][]interface{}
}

func (fake *FakeSystemUtil) MkdirAll(path string, perm os.FileMode) error {
	fake.mkdirAllMutex.Lock()
	fake.mkdirAllArgsForCall = append(fake.mkdirAllArgsForCall, struct {
		path string
		perm os.FileMode
	}{path, perm})
	fake.guard("MkdirAll")
	fake.invocations["MkdirAll"] = append(fake.invocations["MkdirAll"], []interface{}{path, perm})
	fake.mkdirAllMutex.Unlock()
	if fake.MkdirAllStub != nil {
		return fake.MkdirAllStub(path, perm)
	} else {
		return fake.mkdirAllReturns.result1
	}
}

func (fake *FakeSystemUtil) MkdirAllCallCount() int {
	fake.mkdirAllMutex.RLock()
	defer fake.mkdirAllMutex.RUnlock()
	return len(fake.mkdirAllArgsForCall)
}

func (fake *FakeSystemUtil) MkdirAllArgsForCall(i int) (string, os.FileMode) {
	fake.mkdirAllMutex.RLock()
	defer fake.mkdirAllMutex.RUnlock()
	return fake.mkdirAllArgsForCall[i].path, fake.mkdirAllArgsForCall[i].perm
}

func (fake *FakeSystemUtil) MkdirAllReturns(result1 error) {
	fake.MkdirAllStub = nil
	fake.mkdirAllReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSystemUtil) WriteFile(filename string, data []byte, perm os.FileMode) error {
	var dataCopy []byte
	if data != nil {
		dataCopy = make([]byte, len(data))
		copy(dataCopy, data)
	}
	fake.writeFileMutex.Lock()
	fake.writeFileArgsForCall = append(fake.writeFileArgsForCall, struct {
		filename string
		data     []byte
		perm     os.FileMode
	}{filename, dataCopy, perm})
	fake.guard("WriteFile")
	fake.invocations["WriteFile"] = append(fake.invocations["WriteFile"], []interface{}{filename, dataCopy, perm})
	fake.writeFileMutex.Unlock()
	if fake.WriteFileStub != nil {
		return fake.WriteFileStub(filename, data, perm)
	} else {
		return fake.writeFileReturns.result1
	}
}

func (fake *FakeSystemUtil) WriteFileCallCount() int {
	fake.writeFileMutex.RLock()
	defer fake.writeFileMutex.RUnlock()
	return len(fake.writeFileArgsForCall)
}

func (fake *FakeSystemUtil) WriteFileArgsForCall(i int) (string, []byte, os.FileMode) {
	fake.writeFileMutex.RLock()
	defer fake.writeFileMutex.RUnlock()
	return fake.writeFileArgsForCall[i].filename, fake.writeFileArgsForCall[i].data, fake.writeFileArgsForCall[i].perm
}

func (fake *FakeSystemUtil) WriteFileReturns(result1 error) {
	fake.WriteFileStub = nil
	fake.writeFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSystemUtil) Remove(arg1 string) error {
	fake.removeMutex.Lock()
	fake.removeArgsForCall = append(fake.removeArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.guard("Remove")
	fake.invocations["Remove"] = append(fake.invocations["Remove"], []interface{}{arg1})
	fake.removeMutex.Unlock()
	if fake.RemoveStub != nil {
		return fake.RemoveStub(arg1)
	} else {
		return fake.removeReturns.result1
	}
}

func (fake *FakeSystemUtil) RemoveCallCount() int {
	fake.removeMutex.RLock()
	defer fake.removeMutex.RUnlock()
	return len(fake.removeArgsForCall)
}

func (fake *FakeSystemUtil) RemoveArgsForCall(i int) string {
	fake.removeMutex.RLock()
	defer fake.removeMutex.RUnlock()
	return fake.removeArgsForCall[i].arg1
}

func (fake *FakeSystemUtil) RemoveReturns(result1 error) {
	fake.RemoveStub = nil
	fake.removeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSystemUtil) Exists(path string) bool {
	fake.existsMutex.Lock()
	fake.existsArgsForCall = append(fake.existsArgsForCall, struct {
		path string
	}{path})
	fake.guard("Exists")
	fake.invocations["Exists"] = append(fake.invocations["Exists"], []interface{}{path})
	fake.existsMutex.Unlock()
	if fake.ExistsStub != nil {
		return fake.ExistsStub(path)
	} else {
		return fake.existsReturns.result1
	}
}

func (fake *FakeSystemUtil) ExistsCallCount() int {
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	return len(fake.existsArgsForCall)
}

func (fake *FakeSystemUtil) ExistsArgsForCall(i int) string {
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	return fake.existsArgsForCall[i].path
}

func (fake *FakeSystemUtil) ExistsReturns(result1 bool) {
	fake.ExistsStub = nil
	fake.existsReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeSystemUtil) ReadFile(path string) ([]byte, error) {
	fake.readFileMutex.Lock()
	fake.readFileArgsForCall = append(fake.readFileArgsForCall, struct {
		path string
	}{path})
	fake.guard("ReadFile")
	fake.invocations["ReadFile"] = append(fake.invocations["ReadFile"], []interface{}{path})
	fake.readFileMutex.Unlock()
	if fake.ReadFileStub != nil {
		return fake.ReadFileStub(path)
	} else {
		return fake.readFileReturns.result1, fake.readFileReturns.result2
	}
}

func (fake *FakeSystemUtil) ReadFileCallCount() int {
	fake.readFileMutex.RLock()
	defer fake.readFileMutex.RUnlock()
	return len(fake.readFileArgsForCall)
}

func (fake *FakeSystemUtil) ReadFileArgsForCall(i int) string {
	fake.readFileMutex.RLock()
	defer fake.readFileMutex.RUnlock()
	return fake.readFileArgsForCall[i].path
}

func (fake *FakeSystemUtil) ReadFileReturns(result1 []byte, result2 error) {
	fake.ReadFileStub = nil
	fake.readFileReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeSystemUtil) Invocations() map[string][][]interface{} {
	return fake.invocations
}

func (fake *FakeSystemUtil) guard(key string) {
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
}

var _ cephbrokerlocal.SystemUtil = new(FakeSystemUtil)
